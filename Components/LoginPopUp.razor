@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations;
@using CIP.Website.Interfaces;
@using CIP.Website.Models;
@inject IApiKeyCreation apiKeyCreation;

<style>
    .dialog-width {
        min-width: 40rem;
    }

    .no-border {
        border: none;
    }
</style>

<MudDialog Class="dialog-width">
    <DialogContent>           
        <MudItem>

            @if (!_creatingApiKey)
            {
                <div class="col-auto">
                    <button type="button" href="#" class="css-button-sliding-to-left--rose" @onclick="ApiKeyValidation">Create API Key</button>
               </div>                   
            }
            @if(_creatingApiKey && _apiKeyCreationResponse is null)
            {
                <div class="col-auto">
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                </div>               
            }

            @if (_apiKeyCreationResponse is not null)
            {
                if(_apiKeyCreationResponse.Success)
                {
                    <MudChip Variant="Variant.Outlined" Color="Color.Secondary">Api key: @_apiKey</MudChip>
                }
                <MudAlert Severity="@(_apiKeyCreationResponse.Success ? Severity.Success : Severity.Warning)" Variant="Variant.Outlined">@(_apiKeyCreationResponse.Success ? "Sorry! We failed to create your api key. Please try again" : "Congratulations! We successfully created your api key.")</MudAlert>
            }
        </MudItem>                        
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new();
    private void Close() => MudDialog.Close(DialogResult.Ok(true));
    private string _apiKey { get; set; } = string.Empty;
    private bool _creatingApiKey { get; set; } = false;
    private ICustomResponse? _apiKeyCreationResponse { get; set; }

    private string CreateApiKey() => _apiKey = Guid.NewGuid().ToString();

    private async Task ApiKeyValidation()
    {
        _creatingApiKey = true;
        _apiKeyCreationResponse = null;
        StateHasChanged();

        _apiKeyCreationResponse = await apiKeyCreation.CreateApiKey(_apiKey);
        StateHasChanged();
        _creatingApiKey = false;
    }
}