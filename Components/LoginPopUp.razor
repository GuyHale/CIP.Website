@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations;
@using CIP.Website.Interfaces;
@using CIP.Website.Models;

@inject ICustomAuthentication _customAuthentication;

<style>
    .dialog-width {
        min-width: 40rem;
    }
</style>

<MudDialog Class="dialog-width">
    <DialogContent>           
        <MudItem>
            <MudPaper Class="pa-2">
                <MudTabs Elevation="2" Rounded="true" PanelClass="pa-2">
                    <MudTabPanel Text="Sign up">
                        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">
                            <MudTextField T="string" @bind-Value="@_user.UserName" Label="Username" Required="true" RequiredError="User name is required!" />
                            <MudTextField T="string" @bind-Value="@_user.Email" Label="Email" Required="true" RequiredError="Email is required!"
                                            Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                            <MudTextField T="string" @bind-Value="@_user.Password" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                                            InputType="InputType.Password"
                                            Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                            RequiredError="Password is required!" />
                            <MudTextField T="string" 
                                            Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                                            Validation="@(new Func<string, string?>(PasswordMatch))" />

                            <div class="d-flex row justify-content-evenly">
                                <div class="col-auto">
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@OnRegistration">Sign up</MudButton>
                                </div>
                                <div class="col-auto">
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>form.Reset())">Reset</MudButton>
                                </div>
                            </div>
                        </MudForm>
                    </MudTabPanel>
                    <MudTabPanel Text="Login">
                        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">
                            <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />
                            <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                                            InputType="InputType.Password"
                                            Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                            RequiredError="Password is required!" />


                            <div class="d-flex row justify-content-evenly">
                                <div class="col-auto">
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>{form.Validate();})">Sign up</MudButton>
                                </div>
                                <div class="col-auto">
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
                                </div>
                            </div>
                        </MudForm>
                    </MudTabPanel>
                </MudTabs>                       
            </MudPaper>                   
        </MudItem>                        
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new();

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    bool success = false;
    string[] errors = { };
    private User _user = new();
    MudTextField<string> pwField1 = new();
    MudForm form = new();

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string? PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task OnRegistration()
    {
        await form.Validate();
        if(!form.IsValid)
        {
            return;
        }

        ICustomResponse registrationResponse = await _customAuthentication.Register(_user);

        if(!registrationResponse.Success)
        {
            form.ResetValidation();
            return;
        }
        Submit();
    }
}